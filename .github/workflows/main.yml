name: Master pipeline

on:
  workflow_call:
    inputs:
      package-path:
        required: false
        type: string
      solution-file:
        required: true
        type: string
      app-name:
        required: false
        type: string
      force-release-dev:
        required: false
        type: boolean

env:
  GITHUB_NAMESPACE: ThijmenBrand-LifeManager
  GITHUB_USERNAME: ThijmenBrand
  DOTNET_VERSION: "8.0.x"

jobs:
  build:
    name: Build the project
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Add GitHub NuGet package registry
        run: dotnet nuget add source https://nuget.pkg.github.com/${{ env.GITHUB_NAMESPACE }}/index.json --name github --username ${{ env.GITHUB_USERNAME }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text

      - name: Restore NuGet packages
        run: dotnet restore ${{ inputs.solution-file }}

      #build the project
      - name: Build the project
        run: dotnet build ${{ inputs.solution-file }} --no-restore --configuration Release

      - name: Publish build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: .

  deploy-to-dev:
    needs: build
    if: inputs.force-release-dev == true
    name: Deploy to dev
    uses: ./.github/workflows/build-docker-image.yml
    with:
      project-path: ${{ inputs.solution-file }}
      dockerfile-path: ${{ inputs.solution-file }}
      environment: dev
    secrets: inherit

  setup-package-release:
    needs: build
    if: inputs.package-path != null
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    steps:
      - id: matrix
        run: |
          package_paths="${{ inputs.package-path }}"
          package_paths_array=$(echo "$package_paths" | awk 'BEGIN{ORS=""; print "["} {gsub(/"/, "\\\""); printf "\"%s\", ", $0} END{print "]"}' | sed 's/, ]/]/')
          echo "value=$package_paths_array" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.matrix.outputs.value }}"

  publish-package:
    needs: setup-package-release
    if: inputs.package-path != null
    name: Publish package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        value: ${{ fromJson(needs.setup-package-release.outputs.matrix) }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Set version
        id: set_version
        run: |
          echo "version=$(date +'%Y.%m.%d').$(echo $GITHUB_RUN_NUMBER | cut -c1-7)" >> "$GITHUB_OUTPUT"

      - name: Add GitHub NuGet package registry
        run: dotnet nuget add source https://nuget.pkg.github.com/${{ env.GITHUB_NAMESPACE }}/index.json --name github --username ${{ env.GITHUB_USERNAME }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text

      #pack the project
      - name: NuGet pack
        run: dotnet pack ${{ matrix.value }} --output ./nupkg -p:PackageVersion=${{ steps.set_version.outputs.version }} -p:Configuration=Release

      - name: Push packages
        run: dotnet nuget push ./nupkg/*.nupkg --source github --api-key ${{ secrets.PACKAGE_TOKEN_SECRET }}

  test-application:
    needs: build
    name: Test application
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Test the project
        run: dotnet test ${{ inputs.solution-file }} --configuration Release --no-build --no-restore --results-directory "TestResults-${{ env.DOTNET_VERSION }}"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results-${{ env.DOTNET_VERSION }}
          path: TestResults-${{ env.DOTNET_VERSION }}
        if: ${{ always() }}

  analyse-application:
    needs: test-application
    name: SAST
    uses: ./.github/workflows/sonar-qube.yml
    with:
      solution-file: ${{ inputs.solution-file }}
      app-name: ${{ inputs.app-name }}
    secrets: inherit

  deploy-to-qa:
    if: github.event_name == 'release' && contains(github.event.release.tag_name, 'qa')
    needs: analyse-application
    name: Deploy to QA
    uses: ./.github/workflows/build-docker-image.yml
    with:
      project-path: ${{ inputs.solution-file }}
      dockerfile-path: ${{ inputs.solution-file }}
      environment: qa
    secrets: inherit
