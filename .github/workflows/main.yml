name: Master pipeline

on:
  workflow_call:
    inputs:
      package-path:
        required: false
        type: string
      dockerfile-path:
        required: false
        type: string
      solution-file:
        required: true
        type: string
      project-path:
        required: true
        type: string
      app-name:
        required: false
        type: string
      force-release-dev:
        required: false
        type: boolean
      dotnet-version:
        required: false
        type: string
        default: "8.0.x"

env:
  GITHUB_NAMESPACE: ThijmenBrand-LifeManager
  GITHUB_USERNAME: ThijmenBrand

jobs:
  build:
    name: Build the project
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Add GitHub NuGet package registry
        run: dotnet nuget add source https://nuget.pkg.github.com/${{ env.GITHUB_NAMESPACE }}/index.json --name github --username ${{ env.GITHUB_USERNAME }} --password ${{ secrets.PACKAGE_TOKEN_SECRET }} --store-password-in-clear-text

      - name: Restore NuGet packages
        run: dotnet restore ${{ inputs.solution-file }}

      #build the project
      - name: Build the project
        run: dotnet build ${{ inputs.solution-file }} --no-restore --configuration Release

      - name: Publish build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: .

  publish-package:
    if: inputs.package-path != null
    needs: build
    name: Publish package
    uses: ./.github/workflows/publish-package.yml
    with:
      package-path: ${{ inputs.package-path }}
    secrets: inherit

  deploy-to-dev:
    needs: build
    if: (inputs.force-release-dev == true || github.ref == 'refs/heads/develop') && inputs.dockerfile-path != null
    name: Deploy to dev
    uses: ./.github/workflows/build-docker-image.yml
    with:
      project-path: ${{ inputs.project-path }}
      dockerfile-path: ${{ inputs.dockerfile-path }}
      environment: dev
    secrets: inherit

  test-application:
    needs: build
    name: Test application
    uses: ./.github/workflows/test.yml
    with:
      dotnet-version: ${{ inputs.dotnet-version}}
      solution-file: ${{ inputs.solution-file }}

  analyse-application:
    needs: test-application
    name: SAST
    uses: ./.github/workflows/sonar-qube.yml
    with:
      solution-file: ${{ inputs.solution-file }}
      app-name: ${{ inputs.app-name }}
    secrets: inherit

  run-dast:
    if: github.event_name == 'release' && github.ref == 'refs/heads/release'
    needs: analyse-application
    name: DAST
    runs-on: ubuntu-latest

    steps:
      - name: DAST
        run: echo "DAST"

  release-to-production:
    if: github.event_name == 'release' && github.ref == 'refs/heads/release' && inputs.dockerfile-path != null
    needs: run-dast
    name: Deploy to Production
    uses: ./.github/workflows/build-docker-image.yml
    with:
      project-path: ${{ inputs.project-path }}
      dockerfile-path: ${{ inputs.dockerfile-path }}
      environment: production
    secrets: inherit

  deploy-to-qa:
    if: github.event_name == 'release' && contains(github.event.release.tag_name, 'qa') && inputs.dockerfile-path != null
    needs: analyse-application
    name: Deploy to QA
    uses: ./.github/workflows/build-docker-image.yml
    with:
      project-path: ${{ inputs.project-path }}
      dockerfile-path: ${{ inputs.dockerfile-path }}
      environment: qa
    secrets: inherit

  deploy-to-staging:
    if: github.event_name == 'release' && contains(github.event.release.tag_name, 'staging') && inputs.dockerfile-path != null
    needs: analyse-application
    name: Deploy to Staging
    uses: ./.github/workflows/build-docker-image.yml
    with:
      project-path: ${{ inputs.project-path }}
      dockerfile-path: ${{ inputs.dockerfile-path }}
      environment: staging
    secrets: inherit
